generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  password      String?
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]
  projects      Project[] 
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  type       String
  code       String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, value])
  @@index([userId])
}

// Your existing models remain unchanged
model Project {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  isPublic    Boolean    @default(true)
  status      String     @default("active")
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  feedback    Feedback[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Feedback {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  category   String
  status     String    @default("new")
  projectId  String    @db.ObjectId
  project    Project   @relation(fields: [projectId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([projectId])
  @@index([status])
}